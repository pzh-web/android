1.创建仓库

mkdir git

cd git  ——创建/home/XXX/git空目录

2.通过git init命令把这个目录变成Git可以管理的仓库：

git init ——初始化Git仓库

3.用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)：

git add filename

4.用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)：

git commit -m "有意义的附加说明"

5.随时掌握工作区的状态

git status

6.查看文件被修改的内容

git diff

7.查看代码的历史版本号

git log

git log --pretty=oneline   ——要求版本信息只能在一行中显示

8.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭

git reset --hard commit_id

或git reset --hard HEAD^(HEAD^^等等)

9.查看命令历史，以便确定要回到未来的哪个版本

git reflog

10.弄明白Git的工作区(当前分区)和暂存区

11.理解Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中

12.撤销修改

命令git checkout -- filename意思就是，把filename文件在工作区的修改全部撤销，这里有两种情况：

一种是filename自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是filename已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，版本回退，不过前提是没有推送到远程库。

 13.删除文件

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

14.将本地仓库与github仓库关联起来

往里面添加文件：
复制代码

1 touch README.md
2 git init
3 git add README.md
4 git commit -m "first commit"
5 git remote add origin git@github.com:sysublackbear/Learmgitfirst.git
6 git push -u origin master

复制代码

将本地仓库同步github仓库：

1 git remote add origin git@github.com:sysublackbear/Learmgitfirst.git
2 git push -u origin master

然后，从现在起，只要本地作了提交，就可以通过命令：

1 git push origin master

把本地master分支的最新修改推送至GitHub

15.多人协作一个项目的时候，我们每个人可以通过从远程仓库克隆一份来作为己用。

1 git  clone git@github,com:sysublackbear/XXXX.git

16.创建分支并且切换到分支

1 git checkout -b dev
2 Switched to a new branch 'dev'

等价于：

1 git branch dev
2 git checkout dev
3 Switched to branch 'dev'

查看分支：

1 git branch

将次分支合并到主分支上面：

1 git merge dev

删除分支：

1 git branch -d dev
2 Deleted branch dev (was fec145a).

17.解决冲突

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。

18.Bug修复

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场

19.开发新功能

开发一个新功能，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D name强行删除。

20.参与开源项目先要克隆一份到本地

1 git clone git@github.com:michaelliao/bootstrap.git



===============================================================================================
Git配置
	
git config --global user.name "robbin"  
git config --global user.email "fankai#gmail.com"
git config --global color.ui true
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor "mate -w"    
# 设置Editor使用textmate
git config -1 
#列举所有配置

用户的git配置文件~/.gitconfig

Git常用命令

查看、添加、提交、删除、找回，重置修改文件
	
git help <command>  
# 显示command的help
git show            
# 显示某次提交的内容
git show $id
 
git co  -- <file>   
# 抛弃工作区修改
git co  .           
# 抛弃工作区修改
 
git add <file>      
# 将工作文件修改提交到本地暂存区
git add .           
# 将所有修改过的工作文件提交暂存区
 
git rm <file>       
# 从版本库中删除文件
git rm <file> --cached  
# 从版本库中删除文件，但不删除文件
 
git reset <file>    
# 从暂存区恢复到工作文件
git reset -- .      
# 从暂存区恢复到工作文件
git reset --hard    
# 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
 
git ci <file>
git ci .
git ci -a           
# 将git add, git rm和git ci等操作都合并在一起做
git ci -am "some comments"
git ci --amend      
# 修改最后一次提交记录
 
git revert <$id>    
# 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
git revert HEAD     
# 恢复最后一次提交的状态

查看文件diff	
git diff <file>     
# 比较当前文件和暂存区文件差异
git diff
git diff <$id1> <$id2>   
# 比较两次提交之间的差异
git diff <branch1>..<branch2> 
# 在两个分支之间比较 
git diff --staged   
# 比较暂存区和版本库差异
git diff --cached   
# 比较暂存区和版本库差异
git diff --stat     
# 仅仅比较统计信息

查看提交记录

git log
git log <file>      
# 查看该文件每次提交记录
git log -p <file>   
# 查看每次详细修改内容的diff
git log -p -2       
# 查看最近两次详细修改内容的diff
git log --stat      
#查看提交统计信息

tig

Mac上可以使用tig代替diff和log，brew install tig

Git 本地分支管理

查看、切换、创建和删除分支

git br -r           
# 查看远程分支
git br <new_branch> 
# 创建新的分支
git br -v           
# 查看各个分支最后提交信息
git br --merged     
# 查看已经被合并到当前分支的分支
git br --no-merged  
# 查看尚未被合并到当前分支的分支
 
git co <branch>     
# 切换到某个分支
git co -b <new_branch> 
# 创建新的分支，并且切换过去
git co -b <new_branch> <branch>  
# 基于branch创建新的new_branch
 
git co $id          
# 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b <new_branch>  
# 把某次历史提交记录checkout出来，创建成一个分支
 
git br -d <branch>  
# 删除某个分支
git br -D <branch>  
# 强制删除某个分支 (未被合并的分支被删除的时候需要强制)

 分支合并和rebase

git merge <branch>               
# 将branch分支合并到当前分支
git merge origin/master --no-ff  
# 不要Fast-Foward合并，这样可以生成merge提交
 
git rebase master <branch>       
# 将master rebase到branch，相当于：
git co <branch> && git rebase master && git co master && git merge <branch>

 Git补丁管理(方便在多台机器上开发同步时用)

git diff > ../sync.patch         
# 生成补丁
git apply ../sync.patch          
# 打补丁
git apply --check ../sync.patch  
#测试补丁能否成功

 Git暂存管理
	
git stash                        
# 暂存
git stash list                   
# 列所有stash
git stash apply                  
# 恢复暂存的内容
git stash drop                   
# 删除暂存区

Git远程分支管理
	
git pull                         
# 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 
# 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 
# 抓取远程仓库更新
git merge origin/master          
# 将远程主分支合并到本地当前分支
git co --track origin/branch     
# 跟踪某个远程分支创建相应的本地分支
git co -b <local_branch> origin/<remote_branch>  
# 基于远程分支创建本地分支，功能同上
 
git push                         
# push所有分支
git push origin master           
# 将本地主分支推到远程主分支
git push -u origin master        
# 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin <local_branch>   
# 创建远程分支， origin是远程仓库名
git push origin <local_branch>:<remote_branch>  
# 创建远程分支
git push origin :<remote_branch>  
#先删除本地分支(git br -d <branch>)，然后再push删除远程分支

Git远程仓库管理

github
	
git remote -v                    
# 查看远程服务器地址和仓库名称
git remote show origin           
# 查看远程服务器仓库状态
git remote add origin git@ github:robbin/robbin_site.git         
# 添加远程仓库地址
git remote set-url origin git@ github.com:robbin/robbin_site.git 
# 设置远程仓库地址(用于修改远程仓库地址)
git remote rm <repository>       
# 删除远程仓库

创建远程仓库
	
git clone --bare robbin_site robbin_site.git  
# 用带版本的项目创建纯版本仓库
scp -r my_project.git git@ git.csdn.net:~      
# 将纯仓库上传到服务器上
 
mkdir robbin_site.git && cd robbin_site.git && git --bare init 
# 在服务器创建纯仓库
git remote add origin git@ github.com:robbin/robbin_site.git    
# 设置远程仓库地址
git push -u origin master                                      
# 客户端首次提交
git push -u origin develop  
# 首次将本地develop分支提交到远程develop分支，并且track
 
git remote set-head origin master   
# 设置远程仓库的HEAD指向master分支

也可以命令设置跟踪远程库和本地库
	
git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop

